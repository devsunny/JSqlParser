/* CCJSqlParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2013 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

package net.sf.jsqlparser.parser;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.set.Set;
import net.sf.jsqlparser.statement.show.Show;
import java.util.*;
import java.util.regex.Pattern;
import com.asksunny.sql.engine.util.CaseInsensitiveMap;

/** Token Manager. */
@SuppressWarnings("unused")public class CCJSqlParserTokenManager implements CCJSqlParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1000000000L) != 0L)
            return 8;
         if ((active2 & 0x10000L) != 0L)
            return 1;
         if ((active2 & 0x800000000L) != 0L)
            return 5;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0xffffffffffffffffL) != 0L)
         {
            jjmatchedKind = 133;
            return 43;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffee7e06ffff80L) != 0L || (active1 & 0xbfffffbfdff7fb3fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active0 & 0x1181f9000060L) != 0L || (active1 & 0x40000040200804c0L) != 0L)
            return 43;
         return -1;
      case 2:
         if ((active0 & 0x7ffffa000ef9fb80L) != 0L || (active1 & 0x9f7bff7ffffffffdL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 2;
            }
            return 43;
         }
         if ((active0 & 0x800005fe01060400L) != 0L || (active1 & 0x2084008000000002L) != 0L)
            return 43;
         return -1;
      case 3:
         if ((active0 & 0x500402000af9ff80L) != 0L || (active1 & 0x1f2bfffdbffffffdL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 3;
            }
            return 43;
         }
         if ((active0 & 0x2ffbf80004040000L) != 0L || (active1 & 0x80d0000240000000L) != 0L)
            return 43;
         return -1;
      case 4:
         if ((active0 & 0x2000af0ff80L) != 0L || (active1 & 0x1e09affcbfdfe000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 4;
            }
            return 43;
         }
         if ((active0 & 0x5004000000090000L) != 0L || (active1 & 0x132500100201ffdL) != 0L)
            return 43;
         return -1;
      case 5:
         if ((active0 & 0x2000a70a980L) != 0L || (active1 & 0x1e01affc3f800000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 5;
            }
            return 43;
         }
         if ((active0 & 0x805600L) != 0L || (active1 & 0x80000807fe000L) != 0L)
            return 43;
         return -1;
      case 6:
         if ((active0 & 0x860a980L) != 0L || (active1 & 0xe01076438000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
            return 43;
         }
         if ((active0 & 0x20002104000L) != 0L || (active1 & 0x1000a89807800000L) != 0L)
            return 43;
         return -1;
      case 7:
         if ((active0 & 0x820a880L) != 0L || (active1 & 0xe00072420000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 43;
         }
         if ((active0 & 0x400100L) != 0L || (active1 & 0x1004018000000L) != 0L)
            return 43;
         return -1;
      case 8:
         if ((active0 & 0x820a000L) != 0L || (active1 & 0x32000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 8;
            }
            return 43;
         }
         if ((active0 & 0x880L) != 0L || (active1 & 0xe00040420000000L) != 0L)
            return 43;
         return -1;
      case 9:
         if ((active0 & 0x8200080L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 9;
            return 43;
         }
         if ((active0 & 0xa000L) != 0L || (active1 & 0x30000000000L) != 0L)
            return 43;
         return -1;
      case 10:
         if ((active0 & 0x8000080L) != 0L)
            return 43;
         if ((active0 & 0x200000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 10;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x62000000L);
      case 37:
         return jjStopAtPos(0, 165);
      case 38:
         return jjStopAtPos(0, 161);
      case 40:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
      case 41:
         return jjStopAtPos(0, 143);
      case 42:
         return jjStopAtPos(0, 145);
      case 43:
         return jjStopAtPos(0, 162);
      case 44:
         return jjStopAtPos(0, 141);
      case 45:
         return jjStartNfaWithStates_0(0, 163, 5);
      case 46:
         return jjStartNfaWithStates_0(0, 144, 1);
      case 47:
         return jjStartNfaWithStates_0(0, 164, 8);
      case 58:
         jjmatchedKind = 172;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000L);
      case 59:
         return jjStopAtPos(0, 139);
      case 60:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1800000L);
      case 61:
         return jjStopAtPos(0, 140);
      case 62:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 63:
         return jjStopAtPos(0, 146);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 94:
         return jjStopAtPos(0, 166);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8e04000020L, 0x6000000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x4000020L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x24000000008000L, 0x1008250040004000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x880010100800L, 0x10002000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100040000004000L, 0x880420000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8408000000001400L, 0x820008000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100068010000L, 0x40200800c0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x1000040000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2400000080100L, 0x40001000000100L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x2100000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x202000000000L, 0x10800001000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000181000000L, 0x200010600L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20002000080L, 0x400400400800001L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x2180020002000800L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200004000200200L, 0x8001100000008000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1080010000402000L, 0x4000000008000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000010000cL, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x80000201000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4840000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x268000000000L);
      case 124:
         jjmatchedKind = 160;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000L);
      case 125:
         return jjStopAtPos(0, 168);
      case 126:
         jjmatchedKind = 155;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000L);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         break;
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 58:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         break;
      case 61:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 62:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      case 64:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1020000002020080L, active1, 0x140083441241000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20a5000742800L, active1, 0x2000600a020L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L, active2, 0x200000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c0000000000000L, active1, 0x8000040000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800400000081000L, active1, 0x21000110000901L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000200000000L, active1, 0x2000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0x140c08000000L, active1, 0x2000040200800c8L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 43);
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8201012000008500L, active1, 0x2888a18000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x100000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc800001000000L, active1, 0x400400008804410L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000004000L, active1, 0x400004L, active2, 0L);
      case 84:
      case 116:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10200L, active1, 0x100000000000L, active2, 0x40000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200000000000L, active1, 0x1010000000000200L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x200000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x880020000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 43);
         break;
      case 124:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      case 126:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(2, 147);
         break;
      case 42:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 158);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x140000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x201000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 43);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x4100L, active1, 0x800080400000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 43);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 43);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100440L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x60d0000000011000L, active1, 0x400000200004000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000900000L, active1, 0x20000010000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x820L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x40000082000cL, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 43);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000008800L, active1, 0x81800000020b000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x100L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x100210100000080L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc800000000200L, active1, 0x8000000000000010L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 43);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x2000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20006002480L, active1, 0x1020088400000000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 170);
         return jjMoveStringLiteralDfa3_0(active0, 0x120080000000000L, active1, 0x40000050080000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 43);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000000000L, active1, 0x2007825000200L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40001L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 43);
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100L, active1, 0x504000L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x400000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 43);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 43);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 43);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x202f0a008a6c0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L);
      case 72:
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x900800L, active1, 0x40120L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000009000L, active1, 0x811000002000000L);
      case 77:
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x12400L, active1, 0x800000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 43);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 43);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 43);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200008000004L);
      case 79:
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200400000000009L);
      case 80:
      case 112:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 43);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000200L, active1, 0x1000140800000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 43);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x20010000030000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 43);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 43);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x400080L, active1, 0x410000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000L, active1, 0x8000101201010L);
      case 87:
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 43);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x880000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0x40802800000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800008008000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 43);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 43);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000208200L, active1, 0x1400200004210000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 71:
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2080L, active1, 0x1088410000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x8000000000000L);
      case 78:
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 43);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0x40000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000000L);
      case 80:
      case 112:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0x80400000L);
      case 82:
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 43);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 43);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 43);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 43);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x27021080000L);
      case 83:
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 43);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 43);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 43);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 43);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 43);
         break;
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 43);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 43);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 43);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 43);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000100L, active1, 0x10000126000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x200000000000000L);
      case 88:
      case 120:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1009000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0x240802000000L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 43);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 43);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 43);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 43);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2104000L, active1, 0x20004000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 71:
      case 103:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400900L, active1, 0x2000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000202000L, active1, 0x1201080010000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000800000L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 43);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 43);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L);
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 43);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 43);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 43);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 43);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0x400000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0x16000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0x10000000L);
      case 68:
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 43);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L);
      case 69:
      case 101:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 43);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      case 71:
      case 103:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0xc00000400000000L);
      case 76:
      case 108:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 43);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 43);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000100L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 43);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 43);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 43);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 43);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 124, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x8800L, active1, 0x40008000000L);
      case 89:
      case 121:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20020000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 43);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x200800L, active1, 0x200040000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0x10000000000L);
      case 76:
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0x400000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 43);
         break;
      case 84:
      case 116:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 43);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 121, 43);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L, active1, 0x20000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 71:
      case 103:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 43);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 43);
         break;
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 43);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 43);
         break;
      case 83:
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 105, 43);
         break;
      case 84:
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 104, 43);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 7, 43);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 101, 43);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 21, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x1040001090400010L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(23, 24); }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(18, 19); }
                  else if (curChar == 36)
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 43:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAdd(16); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  break;
               case 0:
                  if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if (curChar != 45)
                     break;
                  if (kind > 131)
                     kind = 131;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 9:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 42)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 11:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 10); }
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 10); }
                  break;
               case 13:
                  if (curChar == 47 && kind > 132)
                     kind = 132;
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 15:
                  if (curChar != 36)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if (curChar != 39)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(21, 19); }
                  break;
               case 21:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(21, 19); }
                  break;
               case 22:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 24:
                  if (curChar == 34 && kind > 137)
                     kind = 137;
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(10, 11); }
                  break;
               case 29:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 0); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if (curChar != 46)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAdd(42); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAddTwoStates(29, 30); }
                  else if (curChar == 96)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 43:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAdd(16); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 6:
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
               case 12:
                  { jjCheckNAddTwoStates(12, 10); }
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAdd(16); }
                  break;
               case 18:
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 21:
                  { jjCheckNAddTwoStates(21, 19); }
                  break;
               case 23:
                  { jjAddStates(16, 17); }
                  break;
               case 25:
                  if (curChar == 96)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 26:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 96 && kind > 137)
                     kind = 137;
                  break;
               case 28:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 29:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (curChar == 93 && kind > 137)
                     kind = 137;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(18, 19); }
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(20, 21); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 43:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 133)
                        kind = 133;
                     { jjCheckNAdd(16); }
                  }
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(12, 10); }
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAdd(16); }
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(21, 19); }
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(16, 17); }
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(10, 11); }
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 13); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   32, 0, 33, 34, 38, 39, 42, 10, 11, 13, 26, 27, 29, 30, 3, 4, 
   23, 24, 36, 37, 40, 41, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", "\75", "\54", "\50", "\51", "\56", "\52", "\77", "\50\53\51", "\76", "\74", 
"\76\75", "\74\75", "\74\76", "\41\75", "\100\100", "\176", "\176\52", "\41\176", 
"\41\176\52", "\174\174", "\174", "\46", "\53", "\55", "\57", "\45", "\136", null, "\175", 
null, null, "\72\72", "\72", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x3ffffffffb23L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x18L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x18L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[43];
    private final int[] jjstateSet = new int[2 * 43];

    
    protected char curChar;
}
