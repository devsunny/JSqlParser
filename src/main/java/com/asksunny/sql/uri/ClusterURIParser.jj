/**
*
* /cygdrive/c/Users/Sunny Liu/git/JSqlParser/src/main/java/com/asksunny/sql/uri
* javacc  -GRAMMAR_ENCODING=UTF-8 ClusterURIParser.jj
*/
options{
    IGNORE_CASE=true ;
    STATIC=false;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(ClusterURIParser)

package com.asksunny.sql.uri;

import java.util.*;

/**
 * The parser generated by JavaCC
 */
public class ClusterURIParser {
	
}

PARSER_END(ClusterURIParser)


TOKEN:
{
	<K_HTTP: "HTTP">
	| <K_HTTPS: "HTTPS">
	| <K_FTP: "FTP">
	| <K_FTPS: "FTPS">
	| <K_HDFS: "HDFS">
	| <K_JDBC: "JDBC">
	| <K_WEBHDFS: "WEBHDFS">
	| <K_FILE: "FILE">
	| <K_SMTP: "SMTP">
	| <K_SCP: "SCP">
	| <K_SFTP: "SFTP">
}


TOKEN : 
{
    	< S_DOMAINNAME: <CHARS> ( <CHARS> | ["-"] )* >
  |     < S_URLSAFE_WORD: (<URLENCODE_CHAR> | <CHARS>) (<URLENCODE_CHAR> | <CHARS> | ["-", "_", ":"])* >
  |     < S_PORTNUM: ["1" - "9"] (["0" - "9"])* >
  |     < S_SPEARATOR: ":" >
  | 	< #URLENCODE_CHAR: "%" ["A" - "F", "0" - "9"]["A" - "F", "0" - "9"] >
  | 	< #CHARS: ["0" - "9", "A" - "Z", "a" - "z"] >
}




ClusterURI fullURL():
{
	ClusterURI uri = null;
	java.util.List<QueryParameter> params = null;
	StringBuilder path = new StringBuilder();
	String p = null;
}
{
	( uri=baseUrl()  [ LOOKAHEAD(2) p=filePath(){path.append(p);} ] ["/"{path.append("/");}]  [params=queryString()])
	{
		
		if(path.length()>0){
			uri.setPath(path.toString());
		}		
		if(params!=null){
			for(QueryParameter param: params)
			{
				uri.addQueryParameter(param);
			}
		}
		
		return uri;
	}

}



ClusterURI baseUrl():
{
	ClusterURI uri = new ClusterURI();
	ProtocolScheme scheme = null;
	java.util.List<TcpHost> hosts = new java.util.ArrayList<TcpHost>();
	TcpHost h = null;
}
{
	( scheme=protocolScheme() "//" [ h=fullQualifyName(){hosts.add(h);}  (( "," | ";") h=fullQualifyName(){hosts.add(h);})* ] )
	{
		uri.setScheme(scheme);
		uri.setHosts(hosts);
		return uri;
	}

}

String filePath():
{StringBuilder buf = new StringBuilder();
Token  tok = null;
}
{
	
	(
		"/"{buf.append("/");} tok=<S_URLSAFE_WORD>{buf.append(tok.image);} (  LOOKAHEAD(2) "/"{buf.append("/");} tok=<S_URLSAFE_WORD>{buf.append(tok.image);} )*
	
	) {
		return buf.toString();
	}

}

java.util.List<QueryParameter> queryString():
{
	java.util.List<QueryParameter> params = new java.util.ArrayList<QueryParameter>();
	QueryParameter p = null;
}
{
	("?" [p=queryParameter(){params.add(p);} ( "&" p=queryParameter(){params.add(p);} )*])
	{
		return params;
	}
}

QueryParameter queryParameter():
{
	QueryParameter param = new QueryParameter();
	StringBuilder namebuf = new StringBuilder();
	StringBuilder valbuf = new StringBuilder();
	Token  tok = null;
}
{

	 (
	 	tok=<S_URLSAFE_WORD>{namebuf.append(tok.image);}
	  	("+" tok=<S_URLSAFE_WORD>{namebuf.append("+").append(tok.image);} )*
	 	 "=" [tok=<S_URLSAFE_WORD>{valbuf.append(tok.image);} ("+" tok=<S_URLSAFE_WORD>{valbuf.append("+").append(tok.image);} )*]
	){
		param.setName(namebuf.toString());
		param.setValue(valbuf.toString());		
		return param;
	}
}


ProtocolScheme protocolScheme():
{}
{
	<K_HTTP> {return ProtocolScheme.HTTP;}
	| <K_HTTPS> {return ProtocolScheme.HTTPS;}
	| <K_FTP> {return ProtocolScheme.FTP;}
	| <K_FTPS> {return ProtocolScheme.FTPS;}
	| <K_HDFS> {return ProtocolScheme.HDFS;}
	| <K_JDBC> {return ProtocolScheme.JDBC;}
	| <K_WEBHDFS> {return ProtocolScheme.WEBHDFS;}
	| <K_FILE> {return ProtocolScheme.FILE;}
	| <K_SMTP> {return ProtocolScheme.SMTP;}
	| <K_SCP> {return ProtocolScheme.SCP;}
	| <K_SFTP> {return ProtocolScheme.SFTP;}
}


TcpHost fullQualifyName():
{
	
	TcpHost host = new TcpHost();
	Token tok = null;
	String name = null;
}
{
	( 
		[ tok=<S_URLSAFE_WORD>{host.setUid(tok.image);} [ <S_SPEARATOR> tok=<S_URLSAFE_WORD>{host.setCredential(tok.image);}] "@" ] 
			name=hostname(){host.setHostname(name);} 
				[ ":" tok=<S_PORTNUM>{host.setPortnumber(Integer.valueOf(tok.image));} ]	)
	{
		return host;
	}
}

String hostname():
{
	StringBuilder buf = new StringBuilder();
	Token tok = null;
}
{
	(tok=<S_DOMAINNAME>{buf.append(tok.image);} ("." tok=<S_DOMAINNAME>{buf.append(".").append(tok.image);})*)
	{
		return buf.toString();
	}
	
}






