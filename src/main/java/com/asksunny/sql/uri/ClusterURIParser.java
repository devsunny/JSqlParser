/* ClusterURIParser.java */
/* Generated By:JavaCC: Do not edit this line. ClusterURIParser.java */
package com.asksunny.sql.uri;

import java.util.*;

/**
 * The parser generated by JavaCC
 */
public class ClusterURIParser implements ClusterURIParserConstants {

  final public ClusterURI fullURL() throws ParseException {ClusterURI uri = null;
        java.util.List<QueryParameter> params = null;
        StringBuilder path = new StringBuilder();
        String p = null;
    uri = baseUrl();
    if (jj_2_1(2)) {
      p = filePath();
path.append(p);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
path.append("/");
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      params = queryString();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
if(path.length()>0){
                        uri.setPath(path.toString());
                }
                if(params!=null){
                        for(QueryParameter param: params)
                        {
                                uri.addQueryParameter(param);
                        }
                }

                {if ("" != null) return uri;}
    throw new Error("Missing return statement in function");
  }

  final public ClusterURI baseUrl() throws ParseException {ClusterURI uri = new ClusterURI();
        ProtocolScheme scheme = null;
        java.util.List<TcpHost> hosts = new java.util.ArrayList<TcpHost>();
        TcpHost h = null;
    scheme = protocolScheme();
    jj_consume_token(19);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_DOMAINNAME:
    case S_URLSAFE_WORD:{
      h = fullQualifyName();
hosts.add(h);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 20:
        case 21:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 20:{
          jj_consume_token(20);
          break;
          }
        case 21:{
          jj_consume_token(21);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        h = fullQualifyName();
hosts.add(h);
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
uri.setScheme(scheme);
                uri.setHosts(hosts);
                {if ("" != null) return uri;}
    throw new Error("Missing return statement in function");
  }

  final public String filePath() throws ParseException {StringBuilder buf = new StringBuilder();
Token  tok = null;
    jj_consume_token(18);
buf.append("/");
    tok = jj_consume_token(S_URLSAFE_WORD);
buf.append(tok.image);
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(18);
buf.append("/");
      tok = jj_consume_token(S_URLSAFE_WORD);
buf.append(tok.image);
    }
{if ("" != null) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public java.util.List<QueryParameter> queryString() throws ParseException {java.util.List<QueryParameter> params = new java.util.ArrayList<QueryParameter>();
        QueryParameter p = null;
    jj_consume_token(22);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_URLSAFE_WORD:{
      p = queryParameter();
params.add(p);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 23:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(23);
        p = queryParameter();
params.add(p);
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
  }

  final public QueryParameter queryParameter() throws ParseException {QueryParameter param = new QueryParameter();
        StringBuilder namebuf = new StringBuilder();
        StringBuilder valbuf = new StringBuilder();
        Token  tok = null;
    tok = jj_consume_token(S_URLSAFE_WORD);
namebuf.append(tok.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(24);
      tok = jj_consume_token(S_URLSAFE_WORD);
namebuf.append("+").append(tok.image);
    }
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_URLSAFE_WORD:{
      tok = jj_consume_token(S_URLSAFE_WORD);
valbuf.append(tok.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 24:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(24);
        tok = jj_consume_token(S_URLSAFE_WORD);
valbuf.append("+").append(tok.image);
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
param.setName(namebuf.toString());
                param.setValue(valbuf.toString());
                {if ("" != null) return param;}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolScheme protocolScheme() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_HTTP:{
      jj_consume_token(K_HTTP);
{if ("" != null) return ProtocolScheme.HTTP;}
      break;
      }
    case K_HTTPS:{
      jj_consume_token(K_HTTPS);
{if ("" != null) return ProtocolScheme.HTTPS;}
      break;
      }
    case K_FTP:{
      jj_consume_token(K_FTP);
{if ("" != null) return ProtocolScheme.FTP;}
      break;
      }
    case K_FTPS:{
      jj_consume_token(K_FTPS);
{if ("" != null) return ProtocolScheme.FTPS;}
      break;
      }
    case K_HDFS:{
      jj_consume_token(K_HDFS);
{if ("" != null) return ProtocolScheme.HDFS;}
      break;
      }
    case K_JDBC:{
      jj_consume_token(K_JDBC);
{if ("" != null) return ProtocolScheme.JDBC;}
      break;
      }
    case K_WEBHDFS:{
      jj_consume_token(K_WEBHDFS);
{if ("" != null) return ProtocolScheme.WEBHDFS;}
      break;
      }
    case K_FILE:{
      jj_consume_token(K_FILE);
{if ("" != null) return ProtocolScheme.FILE;}
      break;
      }
    case K_SMTP:{
      jj_consume_token(K_SMTP);
{if ("" != null) return ProtocolScheme.SMTP;}
      break;
      }
    case K_SCP:{
      jj_consume_token(K_SCP);
{if ("" != null) return ProtocolScheme.SCP;}
      break;
      }
    case K_SFTP:{
      jj_consume_token(K_SFTP);
{if ("" != null) return ProtocolScheme.SFTP;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TcpHost fullQualifyName() throws ParseException {TcpHost host = new TcpHost();
        Token tok = null;
        String name = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_URLSAFE_WORD:{
      tok = jj_consume_token(S_URLSAFE_WORD);
host.setUid(tok.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_SPEARATOR:{
        jj_consume_token(S_SPEARATOR);
        tok = jj_consume_token(S_URLSAFE_WORD);
host.setCredential(tok.image);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(26);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    name = hostname();
host.setHostname(name);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_SPEARATOR:{
      jj_consume_token(S_SPEARATOR);
      tok = jj_consume_token(S_PORTNUM);
host.setPortnumber(Integer.valueOf(tok.image));
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return host;}
    throw new Error("Missing return statement in function");
  }

  final public String hostname() throws ParseException {StringBuilder buf = new StringBuilder();
        Token tok = null;
    tok = jj_consume_token(S_DOMAINNAME);
buf.append(tok.image);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      jj_consume_token(27);
      tok = jj_consume_token(S_DOMAINNAME);
buf.append(".").append(tok.image);
    }
{if ("" != null) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(S_URLSAFE_WORD)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(S_URLSAFE_WORD)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ClusterURIParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x400000,0x300000,0x300000,0x3000,0x800000,0x2000,0x1000000,0x1000000,0x2000,0xffe,0x8000,0x2000,0x8000,0x8000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ClusterURIParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ClusterURIParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ClusterURIParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ClusterURIParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ClusterURIParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ClusterURIParser(ClusterURIParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ClusterURIParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
